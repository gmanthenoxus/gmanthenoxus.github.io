<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-09-05T16:07:48+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Noxus’ Hub</title><subtitle>A portfolio showcasing my passions and projects</subtitle><entry><title type="html">The 49 Project Quest</title><link href="http://localhost:4000/journey/2025/09/04/the-49-project-quest.html" rel="alternate" type="text/html" title="The 49 Project Quest" /><published>2025-09-04T00:00:00+01:00</published><updated>2025-09-04T00:00:00+01:00</updated><id>http://localhost:4000/journey/2025/09/04/the-49-project-quest</id><content type="html" xml:base="http://localhost:4000/journey/2025/09/04/the-49-project-quest.html"><![CDATA[<h2 id="the-uncomfortable-truth-about-technical-success">The Uncomfortable Truth About Technical “Success”</h2>

<p><strong>Most of us with technical skills are living someone else’s definition of success.</strong></p>

<p>We’ve been sold this narrative that landing a high paying tech job, mastering the latest tools, and climbing the corporate ladder equals fulfillment. But here’s what nobody talks about: most technical professionals feel completely disconnected from their day-to-day work.</p>

<p>Think about it. You spend 8+ hours a day solving other people’s problems, analyzing other people’s data, building other people’s visions—while your own passions collect dust in the corner of your life labeled “hobbies.”</p>

<p><strong>This is the technical professional’s paradox, and I was caught in it for over twelve years.</strong></p>

<p>For over twelve years, my life has had a constant, frustrating divide. On one side, there’s the technical me: passionate about data, solving complex problems, building systems, and the clean logic of analysis. On the other side, there’s the rest of me: the sports fan, the anime enthusiast, the fitness junkie, the gamer, the foodie, and the music lover.</p>

<p>I’ve collected hobbies and skills like souvenirs from a life of moving and meeting new people, yet I’ve always felt like I had nothing tangible to show for any of it. It felt like I was constantly starting over, never arriving where I wanted to be.</p>

<p>The seed for this quest was planted a long time ago. Since junior school where my friends and I were always creatively designing solutions to problems, constantly brainstorming the “next big thing” to solve everything from giant issues to tiny annoyances. That mindset never left me.</p>

<h2 id="the-universal-technical-skills-paradox">The Universal Technical Skills Paradox</h2>

<p><strong>Here’s what I’ve discovered: This divide isn’t unique to me.</strong></p>

<p>Think about it: How many people do you know who can build complex data models but can’t create a simple system to track their own fitness progress? Who can analyze millions of data points for work but use a basic spreadsheet to manage their fantasy sports team? Who understand algorithms and automation but rely on generic apps to discover new anime or plan their meals?</p>

<p><strong>We’ve become experts at solving everyone else’s problems while our own remain unsolved.</strong></p>

<p>We’ve been trained to think our technical skills and personal interests exist in separate universes. <strong>But what if that’s the biggest lie we’ve been told?</strong></p>

<p>The <a href="https://www.100daysofcode.com/" title="100 Days of Code: A movement that has helped over 500,000 people build consistent coding habits">100 Days of Code movement</a> proved that consistency beats intensity. <a href="https://levels.io/12-startups-12-months/" title="Pieter Levels built 12 startups in 12 months, showing the power of rapid iteration and public building">Pieter Levels’ 12 startups in 12 months</a> demonstrated the power of building in public. <a href="https://austinkleon.com/show-your-work/" title="Austin Kleon's 'Show Your Work' teaches that sharing your process is as valuable as sharing your results">Austin Kleon’s “Show Your Work”</a> taught us that the process is as valuable as the product.</p>

<p>But here’s what they all missed: <strong>The secret ingredient isn’t just consistency or publicity it’s passion alignment.</strong></p>

<h2 id="the-moment-everything-clicked">The Moment Everything Clicked</h2>

<p>The catalyst came from something as simple as wanting to play basketball with friends.</p>

<p>Growing up, basketball was a big part of my life. I’d go out with my friends to play pickup games, but we kept running into the same frustrating problems:</p>

<p>Sometimes I’d get to the court and find it completely empty. Other times, I’d hear about a pickup event or mini-league too late. During games, scores were lost, or stats weren’t tracked. Even in small leagues, records disappeared after the event ended.</p>

<p>And I realized these weren’t just basketball issues. Friends who played football, volleyball, or badminton all faced the same challenges: lack of coordination, missing data, no way to build lasting recognition.</p>

<p><strong>That’s when it hit me: I was experiencing the exact problem I could solve.</strong></p>

<p>Here I was, someone who works with data and builds systems, getting frustrated by problems that were fundamentally about coordination, tracking, and user experience. I had the skills to build but I’d been treating my technical abilities and my sports passion as completely separate worlds.</p>

<p>The irony was obvious. I built complex systems for a living, yet I couldn’t solve the simple technical problems I faced on the court every weekend. My skills and my passion were just waiting to be connected.</p>

<p>That night, I started sketching out what would become Athlehub: a sports-first social hub that makes playing, tracking, and experiencing sports seamless. A platform where every casual game becomes an opportunity for growth, recognition, and connection.</p>

<p><strong>That’s when The 49 Project Quest was born</strong> not as a portfolio building exercise, but as a systematic approach to bridging the gap between my technical skills and the problems I actually cared about solving in my daily life.</p>

<h2 id="why-this-structure-actually-works">Why This Structure Actually Works</h2>

<p>The quest isn’t just ambitious it’s strategically designed based on proven psychological and productivity principles that I’ve learned from both research and personal experience.</p>

<p><strong>Why 49 projects?</strong> Research from <a href="https://jamesclear.com/atomic-habits" title="James Clear's Atomic Habits shows that habits form through consistent repetition over 66 days on average">behavioral psychology</a> shows that complex habits solidify around the 66-day mark. By spacing 49 projects over 12 months, I’m building not just a portfolio, but a sustainable creative practice.</p>

<p><strong>Why 7 domains?</strong> The <a href="https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two" title="Miller's Rule: The human brain can effectively process 7±2 items simultaneously">magic number 7±2</a> represents the limit of human working memory. Seven domains is ambitious but cognitively manageable—enough to prevent boredom, not enough to cause decision paralysis.</p>

<p><strong>But here’s the crucial difference:</strong> This isn’t about building 49 random projects. Each project solves a real problem I face in that domain. Athlehub addresses the coordination and tracking issues I experienced in sports. The fitness projects will optimize my workout routines. The anime projects will help me discover new series based on complex preference algorithms.</p>

<p><strong>This is applied passion development.</strong> I’m not just building a portfolio, I’m building tools that will make my hobbies more enjoyable, more efficient, and more connected to my professional growth.</p>

<h2 id="the-psychology-of-public-building">The Psychology of Public Building</h2>

<p>Let me be honest about something: I’m terrified.</p>

<p>Not of the technical challenges, I know I can figure out the code. I’m terrified of the vulnerability. Of putting my work out there and having people judge not just my technical skills, but my passions, my interests, my very identity.</p>

<p><strong>But that’s exactly why this approach works.</strong></p>

<p><a href="https://buildinpublic.xyz/" title="Building in Public movement: Over 10,000 creators sharing their journey publicly, with 73% reporting increased motivation and accountability">Building in public</a> isn’t just a marketing strategy, it’s a psychological hack. When you commit publicly to something meaningful, you activate what psychologists call “consistency bias.” Your brain literally rewires itself to align your actions with your public commitments.</p>

<p><strong>The fear is the feature, not the bug.</strong></p>

<p>Every time I share a project update, I’m not just showing progress, I’m reinforcing my identity as someone who builds meaningful things. Every comment, every piece of feedback, every small win shared publicly becomes part of a larger narrative that I’m writing about who I am and what I’m capable of.</p>

<p>This quest isn’t just about building 49 projects. It’s about building a new version of myself one where my technical skills and my passions aren’t competing forces, but complementary superpowers.</p>

<h2 id="the-invitation">The Invitation</h2>

<p>This journey is just beginning, and it will be documented right here. I’m building in public, and I want you to be a part of it.</p>

<p><strong>Engage from any angle that excites you:</strong></p>

<ul>
  <li>Share your views in the comments below. What’s a hobby you wish had a better app?</li>
  <li>Recommend ideas or changes for my project hubs.</li>
  <li>Recreate these projects yourself and share your results.</li>
  <li>Join in and share your own building journey.</li>
</ul>

<p>The best way to follow along is to subscribe to my blog and connect with me on LinkedIn, Instagram, and Twitter.</p>

<h2 id="why-this-matters-and-why-you-cant-afford-to-ignore-it">Why This Matters (And Why You Can’t Afford to Ignore It)</h2>

<p>This isn’t just another “developer builds 100 projects” story. <strong>This is about proving a hypothesis that could revolutionize how we think about career fulfillment:</strong> that the most sustainable and lucrative career path lies at the intersection of technical skill and personal passion.</p>

<p><strong>The stakes are higher than you think.</strong> While we’re building other people’s dreams, AI is getting better at writing code. <strong>The developers who will thrive in the next decade aren’t just the ones who can code—they’re the ones who can solve problems they actually care about.</strong></p>

<p>If I’m right, then by the end of this quest, I won’t just have 49 projects I’ll have a completely different relationship with technology. Instead of seeing code as something I do for work and hobbies as something I do for fun, I’ll see them as complementary aspects of a unified creative practice.</p>

<p>Every project I build, every challenge I face, every insight I discover it’s all being documented and shared. Not because I think I have all the answers, but because I believe the questions I’m asking are ones that matter to anyone who’s ever felt that divide between their skills and their passions.</p>

<p><strong>The question isn’t whether you should align your skills with your passions. The question is: can you afford not to?</strong></p>

<p><strong>Here’s to the first of 49 quests. Let’s build something that actually matters.</strong></p>]]></content><author><name>Noxus</name></author><category term="journey" /><category term="journey" /><category term="projects" /><category term="building-in-public" /><category term="goals" /><category term="personal-growth" /><category term="career-change" /><summary type="html"><![CDATA[The Uncomfortable Truth About Technical “Success”]]></summary></entry><entry><title type="html">Building a REST API with Node.js and Express</title><link href="http://localhost:4000/tech/2025/01/08/building-rest-api-nodejs.html" rel="alternate" type="text/html" title="Building a REST API with Node.js and Express" /><published>2025-01-08T00:00:00+00:00</published><updated>2025-01-08T00:00:00+00:00</updated><id>http://localhost:4000/tech/2025/01/08/building-rest-api-nodejs</id><content type="html" xml:base="http://localhost:4000/tech/2025/01/08/building-rest-api-nodejs.html"><![CDATA[<h1 id="building-production-ready-apis-with-nodejs">Building Production-Ready APIs with Node.js</h1>

<p>Creating a robust REST API is one of the most fundamental skills in modern web development. In this comprehensive guide, we’ll build a complete API from scratch using Node.js and Express, covering everything from basic setup to advanced security practices.</p>

<h2 id="why-nodejs-for-apis">Why Node.js for APIs?</h2>

<p>Node.js has become the go-to choice for API development due to its:</p>

<ul>
  <li><strong>Performance</strong>: Non-blocking I/O makes it perfect for handling concurrent requests</li>
  <li><strong>JavaScript everywhere</strong>: Use the same language for frontend and backend</li>
  <li><strong>Rich ecosystem</strong>: NPM provides packages for almost everything</li>
  <li><strong>Scalability</strong>: Built-in clustering and microservices support</li>
</ul>

<h2 id="project-structure">Project Structure</h2>

<p>Let’s start with a clean, scalable project structure:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nodejs-api/
├── src/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── middleware/
│   ├── utils/
│   └── config/
├── tests/
├── docs/
└── package.json
</code></pre></div></div>

<p>This structure separates concerns and makes the codebase maintainable as it grows.</p>

<h2 id="database-integration">Database Integration</h2>

<p>We’re using MongoDB with Mongoose for several reasons:</p>

<ol>
  <li><strong>Flexible schema</strong>: Perfect for evolving APIs</li>
  <li><strong>JSON-native</strong>: Natural fit with JavaScript</li>
  <li><strong>Powerful querying</strong>: Rich query language and aggregation</li>
  <li><strong>Scalability</strong>: Built for horizontal scaling</li>
</ol>

<h2 id="security-best-practices">Security Best Practices</h2>

<p>Security isn’t an afterthought—it’s built into every layer:</p>

<h3 id="input-validation">Input Validation</h3>
<ul>
  <li>Validate all incoming data</li>
  <li>Sanitize user inputs</li>
  <li>Use schema validation with Mongoose</li>
</ul>

<h3 id="authentication--authorization">Authentication &amp; Authorization</h3>
<ul>
  <li>JWT tokens for stateless authentication</li>
  <li>Role-based access control</li>
  <li>Secure password hashing with bcrypt</li>
</ul>

<h3 id="general-security">General Security</h3>
<ul>
  <li>Helmet.js for security headers</li>
  <li>Rate limiting to prevent abuse</li>
  <li>CORS configuration for cross-origin requests</li>
</ul>

<h2 id="error-handling-strategy">Error Handling Strategy</h2>

<p>Consistent error handling is crucial for API reliability:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Global error handler</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">((</span><span class="nx">err</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span> <span class="nx">message</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">err</span><span class="p">;</span>
  
  <span class="nx">res</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="nx">statusCode</span><span class="p">).</span><span class="nf">json</span><span class="p">({</span>
    <span class="na">success</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">error</span><span class="p">:</span> <span class="p">{</span>
      <span class="nx">message</span><span class="p">,</span>
      <span class="p">...(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="p">{</span> <span class="na">stack</span><span class="p">:</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span> <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="testing-your-api">Testing Your API</h2>

<p>A good API needs comprehensive testing:</p>

<ul>
  <li><strong>Unit tests</strong>: Test individual functions and methods</li>
  <li><strong>Integration tests</strong>: Test API endpoints end-to-end</li>
  <li><strong>Load tests</strong>: Ensure performance under stress</li>
</ul>

<h2 id="deployment-considerations">Deployment Considerations</h2>

<p>When deploying to production:</p>

<ol>
  <li><strong>Environment variables</strong>: Keep secrets out of code</li>
  <li><strong>Process management</strong>: Use PM2 or similar for process management</li>
  <li><strong>Monitoring</strong>: Implement logging and health checks</li>
  <li><strong>Scaling</strong>: Consider load balancing and clustering</li>
</ol>

<h2 id="next-steps">Next Steps</h2>

<p>This API provides a solid foundation, but there’s always room for improvement:</p>

<ul>
  <li>Add caching with Redis</li>
  <li>Implement real-time features with WebSockets</li>
  <li>Add comprehensive logging with Winston</li>
  <li>Set up CI/CD pipelines</li>
  <li>Consider GraphQL for more flexible queries</li>
</ul>

<p>Building APIs is both an art and a science. Start with solid fundamentals, follow best practices, and iterate based on real-world usage. Happy coding! 🚀</p>]]></content><author><name>Noxus</name></author><category term="tech" /><category term="nodejs" /><category term="express" /><category term="api" /><category term="javascript" /><category term="backend" /><category term="tutorial" /><summary type="html"><![CDATA[Building Production-Ready APIs with Node.js]]></summary></entry><entry><title type="html">Building My Dream Mechanical Keyboard</title><link href="http://localhost:4000/passion/2025/01/07/custom-mechanical-keyboard-build.html" rel="alternate" type="text/html" title="Building My Dream Mechanical Keyboard" /><published>2025-01-07T00:00:00+00:00</published><updated>2025-01-07T00:00:00+00:00</updated><id>http://localhost:4000/passion/2025/01/07/custom-mechanical-keyboard-build</id><content type="html" xml:base="http://localhost:4000/passion/2025/01/07/custom-mechanical-keyboard-build.html"><![CDATA[<h1 id="the-journey-to-my-perfect-keyboard">The Journey to My Perfect Keyboard</h1>

<p>As a developer who spends 8+ hours a day typing, I’ve always been fascinated by the tools that connect my thoughts to the screen. After years of using standard keyboards, I finally decided to dive into the world of custom mechanical keyboards and build something truly personal.</p>

<h2 id="why-go-custom">Why Go Custom?</h2>

<p>The mechanical keyboard hobby might seem excessive to outsiders, but there are real benefits:</p>

<h3 id="typing-experience">Typing Experience</h3>
<ul>
  <li><strong>Tactile feedback</strong>: Every keypress feels intentional and satisfying</li>
  <li><strong>Consistency</strong>: Each key has the same actuation force and travel</li>
  <li><strong>Durability</strong>: Quality switches are rated for 50+ million keypresses</li>
</ul>

<h3 id="customization">Customization</h3>
<ul>
  <li><strong>Layout optimization</strong>: Remove unused keys, add macros where needed</li>
  <li><strong>Switch selection</strong>: Choose the exact feel and sound you prefer</li>
  <li><strong>Aesthetic control</strong>: Create a keyboard that matches your style</li>
</ul>

<h3 id="learning-experience">Learning Experience</h3>
<ul>
  <li><strong>Electronics knowledge</strong>: Understanding PCBs, switches, and firmware</li>
  <li><strong>Fine motor skills</strong>: Precision assembly and adjustment</li>
  <li><strong>Community engagement</strong>: Joining a passionate, helpful community</li>
</ul>

<h2 id="the-planning-phase">The Planning Phase</h2>

<p>Choosing components for a custom keyboard can be overwhelming. Here’s how I approached it:</p>

<h3 id="layout-selection">Layout Selection</h3>
<p>I chose 75% because it offers:</p>
<ul>
  <li><strong>Compact footprint</strong>: Saves desk space compared to full-size</li>
  <li><strong>Function keys</strong>: Essential for development work</li>
  <li><strong>Arrow keys</strong>: Crucial for navigation and gaming</li>
  <li><strong>Dedicated delete key</strong>: More convenient than Fn combinations</li>
</ul>

<h3 id="switch-research">Switch Research</h3>
<p>After testing various switches at a local store, I settled on Gateron Oil Kings:</p>
<ul>
  <li><strong>Linear feel</strong>: Smooth travel without tactile bump</li>
  <li><strong>Medium weight</strong>: 55g actuation force for balanced typing</li>
  <li><strong>Factory lubed</strong>: Smooth operation out of the box</li>
  <li><strong>Excellent reputation</strong>: Consistently praised in the community</li>
</ul>

<h2 id="the-build-process">The Build Process</h2>

<h3 id="preparation-is-key">Preparation is Key</h3>
<p>Before touching any components, I:</p>
<ul>
  <li>Watched multiple build guides for my specific keyboard</li>
  <li>Prepared a clean, well-lit workspace</li>
  <li>Gathered all necessary tools (screwdrivers, switch puller, keycap puller)</li>
  <li>Downloaded and tested the configuration software (VIA)</li>
</ul>

<h3 id="assembly-challenges">Assembly Challenges</h3>
<p>The most challenging part was stabilizer tuning. These components affect the feel of larger keys (spacebar, shift, enter), and getting them right requires patience:</p>

<ol>
  <li><strong>Initial test</strong>: Spacebar felt mushy and inconsistent</li>
  <li><strong>Disassembly</strong>: Removed keycaps and switches to access stabilizers</li>
  <li><strong>Lubrication</strong>: Applied thin layer of Krytox 205g0 to contact points</li>
  <li><strong>Band-aid mod</strong>: Added foam tape to reduce rattle</li>
  <li><strong>Reassembly and testing</strong>: Much improved feel and sound</li>
</ol>

<h3 id="programming-and-customization">Programming and Customization</h3>
<p>Using VIA software, I created a custom layout optimized for my workflow:</p>
<ul>
  <li><strong>Layer 0</strong>: Standard QWERTY with minor modifications</li>
  <li><strong>Layer 1</strong>: Function keys, media controls, and RGB settings</li>
  <li><strong>Layer 2</strong>: Programming symbols and shortcuts</li>
  <li><strong>Rotary knob</strong>: Volume control with push-to-mute</li>
</ul>

<h2 id="living-with-the-custom-keyboard">Living with the Custom Keyboard</h2>

<p>After three months of daily use, here are my observations:</p>

<h3 id="productivity-impact">Productivity Impact</h3>
<ul>
  <li><strong>Typing speed</strong>: Increased from 85 WPM to 95 WPM</li>
  <li><strong>Accuracy</strong>: Fewer typos due to consistent key feel</li>
  <li><strong>Comfort</strong>: Less finger fatigue during long coding sessions</li>
  <li><strong>Satisfaction</strong>: Genuine enjoyment from the typing experience</li>
</ul>

<h3 id="unexpected-benefits">Unexpected Benefits</h3>
<ul>
  <li><strong>Conversation starter</strong>: Colleagues often ask about the unique keyboard</li>
  <li><strong>Attention to tools</strong>: Increased awareness of other workspace ergonomics</li>
  <li><strong>Community connection</strong>: Joined online forums and local meetups</li>
  <li><strong>Gateway hobby</strong>: Led to interest in other DIY electronics projects</li>
</ul>

<h2 id="lessons-learned">Lessons Learned</h2>

<h3 id="what-id-do-differently">What I’d Do Differently</h3>
<ul>
  <li><strong>Start with a switch tester</strong>: Would have saved time and money</li>
  <li><strong>Budget for extras</strong>: Always need spare switches and keycaps</li>
  <li><strong>Consider sound</strong>: Didn’t realize how much keyboard sound matters in shared spaces</li>
  <li><strong>Plan for iteration</strong>: This won’t be my last custom keyboard</li>
</ul>

<h3 id="advice-for-beginners">Advice for Beginners</h3>
<ul>
  <li><strong>Start simple</strong>: Don’t overcomplicate your first build</li>
  <li><strong>Join the community</strong>: r/MechanicalKeyboards is incredibly helpful</li>
  <li><strong>Budget realistically</strong>: Quality components cost more but last longer</li>
  <li><strong>Enjoy the process</strong>: The journey is as rewarding as the destination</li>
</ul>

<h2 id="the-rabbit-hole-continues">The Rabbit Hole Continues</h2>

<p>Building this keyboard opened up a whole new world of customization and craftsmanship. I’m already planning my next build—a split ergonomic keyboard for even better typing ergonomics.</p>

<p>The mechanical keyboard hobby teaches patience, attention to detail, and the value of quality tools. More than that, it’s a reminder that the things we use every day deserve thoughtful consideration and personal touch.</p>

<p>Whether you’re a developer, writer, or anyone who spends significant time typing, I encourage you to explore what a custom keyboard might offer. Your fingers (and your productivity) might thank you! ⌨️✨</p>]]></content><author><name>Noxus</name></author><category term="passion" /><category term="mechanical-keyboards" /><category term="diy" /><category term="hardware" /><category term="custom-build" /><category term="hobby" /><summary type="html"><![CDATA[The Journey to My Perfect Keyboard]]></summary></entry></feed>